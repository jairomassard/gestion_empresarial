{"version":3,"file":"js/133.cd00429a.js","mappings":"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","sources":["webpack://frontend/./src/views/DailyProfit.vue","webpack://frontend/./src/views/DailyProfit.vue?a47f"],"sourcesContent":["<template>\r\n    <div class=\"daily-profit\">\r\n      <h1>Utilidad Diaria por PDV - {{ monthName }} {{ year }}</h1>\r\n      <div class=\"filters\">\r\n        <label>Año:</label>\r\n        <select v-model=\"year\" @change=\"fetchData\">\r\n          <option v-for=\"y in years\" :key=\"y\" :value=\"y\">{{ y }}</option>\r\n        </select>\r\n        <label>Mes:</label>\r\n        <select v-model=\"month\" @change=\"updateDaysAndFetch\">\r\n          <option v-for=\"m in months\" :key=\"m.num\" :value=\"m.num\">{{ m.name }}</option>\r\n        </select>\r\n        <label>Estatus PDV:</label>\r\n        <select v-model=\"status\" @change=\"fetchData\">\r\n          <option value=\"Todos\">Todos</option>\r\n          <option value=\"Activo\">Activo</option>\r\n          <option value=\"Inactivo\">Inactivo</option>\r\n        </select>\r\n        <label>PDV:</label>\r\n        <select v-model=\"selectedPDV\" @change=\"fetchData\">\r\n          <option value=\"Todos\">Todos</option>\r\n          <option v-for=\"pdv in pdvs\" :key=\"pdv\" :value=\"pdv\">{{ pdv }}</option>\r\n        </select>\r\n        <label>Día:</label>\r\n        <select v-model=\"selectedDay\" @change=\"fetchData\">\r\n          <option value=\"Todos\">Todos</option>\r\n          <option v-for=\"day in daysInMonth\" :key=\"day\" :value=\"day\">{{ day }}</option>\r\n        </select>\r\n      </div>\r\n  \r\n      <!-- Mensaje si no hay datos -->\r\n      <div v-if=\"noData\" class=\"no-data-message\">\r\n        No hay datos disponibles para el mes, año y filtros seleccionados.\r\n      </div>\r\n  \r\n      <!-- Gráficos -->\r\n      <div v-if=\"!noData\" class=\"charts-container\">\r\n        <!-- Gráfico de Barras: Utilidad Total por PDV -->\r\n        <div class=\"chart-wrapper\">\r\n          <h2>Utilidad Total por PDV</h2>\r\n          <Bar :data=\"barChartData\" :options=\"barChartOptions\" />\r\n        </div>\r\n  \r\n        <!-- Gráfico de Líneas: Tendencia de Utilidad Diaria -->\r\n        <div class=\"chart-wrapper\">\r\n          <h2>Tendencia de Utilidad Diaria</h2>\r\n          <div class=\"pdv-selector\">\r\n            <label>Seleccionar PDV:</label>\r\n            <select v-model=\"selectedPdv\">\r\n              <option value=\"total\">Total (Todos los PDVs)</option>\r\n              <option v-for=\"pdv in filteredPdvs\" :key=\"pdv\" :value=\"pdv\">{{ pdv }}</option>\r\n            </select>\r\n          </div>\r\n          <Line :data=\"lineChartData\" :options=\"lineChartOptions\" />\r\n        </div>\r\n      </div>\r\n  \r\n      <!-- Tabla -->\r\n      <div v-if=\"!noData\" class=\"table-container\">\r\n        <table class=\"profit-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Fecha</th>\r\n              <th v-for=\"pdv in filteredPdvs\" :key=\"pdv\">{{ pdv }}</th>\r\n              <th>Total</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr v-for=\"row in filteredDailyProfitData\" :key=\"row.date\">\r\n              <td>{{ row.date }}</td>\r\n              <td v-for=\"pdv in filteredPdvs\" :key=\"pdv\">\r\n                {{ row[pdv] ? formatCurrency(row[pdv].utilidad) : '-' }}\r\n              </td>\r\n              <td>{{ formatCurrency(row.total.utilidad) }}</td>\r\n            </tr>\r\n            <tr class=\"total-row\" v-if=\"filteredDailyProfitData.length > 0\">\r\n              <td>{{ filteredTotals.date }}</td>\r\n              <td v-for=\"pdv in filteredPdvs\" :key=\"pdv\">\r\n                {{ filteredTotals[pdv] ? formatCurrency(filteredTotals[pdv].utilidad) : '-' }}\r\n              </td>\r\n              <td>{{ formatCurrency(filteredTotals.total.utilidad) }}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { ref, onMounted, computed, watch } from 'vue';\r\n  import { useStore } from 'vuex';\r\n  import { useRouter } from 'vue-router';\r\n  import axios from '@/api/axios';\r\n  import { Bar, Line } from 'vue-chartjs';\r\n  import {\r\n    Chart as ChartJS,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n    BarElement,\r\n    LineElement,\r\n    PointElement,\r\n    CategoryScale,\r\n    LinearScale,\r\n    TimeScale\r\n  } from 'chart.js';\r\n  import ChartDataLabels from 'chartjs-plugin-datalabels';\r\n  import 'chartjs-adapter-date-fns';\r\n  \r\n  // Registrar los componentes de Chart.js\r\n  ChartJS.register(\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n    BarElement,\r\n    LineElement,\r\n    PointElement,\r\n    CategoryScale,\r\n    LinearScale,\r\n    TimeScale,\r\n    ChartDataLabels\r\n  );\r\n  \r\n  export default {\r\n    name: 'DailyProfit',\r\n    components: {\r\n      Bar,\r\n      Line\r\n    },\r\n    setup() {\r\n      const store = useStore();\r\n      const router = useRouter();\r\n  \r\n      // Datos reactivos\r\n      const year = ref(null);\r\n      const years = ref([]);\r\n      const currentDate = new Date();\r\n      const currentMonth = currentDate.getMonth() + 1;\r\n      const currentYear = currentDate.getFullYear();\r\n      const month = ref(currentMonth);\r\n      const months = ref([\r\n        { num: 1, name: 'Enero' }, { num: 2, name: 'Febrero' }, { num: 3, name: 'Marzo' },\r\n        { num: 4, name: 'Abril' }, { num: 5, name: 'Mayo' }, { num: 6, name: 'Junio' },\r\n        { num: 7, name: 'Julio' }, { num: 8, name: 'Agosto' }, { num: 9, name: 'Septiembre' },\r\n        { num: 10, name: 'Octubre' }, { num: 11, name: 'Noviembre' }, { num: 12, name: 'Diciembre' }\r\n      ]);\r\n      const status = ref('Activo');\r\n      const selectedPDV = ref('Todos');\r\n      const selectedDay = ref('Todos');\r\n      const daysInMonth = ref([]);\r\n      const dailyProfitData = ref([]);\r\n      const filteredDailyProfitData = ref([]);\r\n      const pdvs = ref([]);\r\n      const filteredPdvs = ref([]);\r\n      const totals = ref({});\r\n      const filteredTotals = ref({});\r\n      const selectedPdv = ref('total');\r\n  \r\n      // Computed para el nombre del mes\r\n      const monthName = computed(() => {\r\n        const selectedMonth = months.value.find(m => m.num === month.value);\r\n        return selectedMonth ? selectedMonth.name : 'Mes';\r\n      });\r\n  \r\n      // Computed para determinar si no hay datos\r\n      const noData = computed(() => {\r\n        const result = filteredDailyProfitData.value.length === 0 ||\r\n                      filteredDailyProfitData.value.every(row => !row.total || row.total.utilidad === 0);\r\n        console.log('noData:', result, 'filteredDailyProfitData:', filteredDailyProfitData.value);\r\n        return result;\r\n      });\r\n  \r\n      // Generar lista de días del mes\r\n      const updateDaysInMonth = () => {\r\n        if (!year.value || !month.value) return;\r\n        console.log('Actualizando días para:', { year: year.value, month: month.value });\r\n        const daysInMonthMap = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31};\r\n        if (month.value === 2 && year.value % 4 === 0 && (year.value % 100 !== 0 || year.value % 400 === 0)) {\r\n          daysInMonthMap[2] = 29;\r\n        }\r\n        const numDays = daysInMonthMap[month.value] || 30;\r\n        daysInMonth.value = Array.from({ length: numDays }, (_, i) => i + 1);\r\n        selectedDay.value = 'Todos';\r\n      };\r\n  \r\n      // Actualizar días y obtener datos\r\n      const updateDaysAndFetch = () => {\r\n        updateDaysInMonth();\r\n        fetchData();\r\n      };\r\n  \r\n      // Obtener los años disponibles\r\n      const fetchAvailableYears = async () => {\r\n        try {\r\n          const response = await axios.get('/available-years');\r\n          years.value = response.data.years || [];\r\n          if (years.value.length > 0) {\r\n            year.value = years.value.includes(currentYear) ? currentYear : years.value[0];\r\n            updateDaysInMonth();\r\n            fetchData();\r\n          }\r\n        } catch (error) {\r\n          console.error('Error fetching available years:', error);\r\n          years.value = Array.from({ length: 5 }, (_, i) => currentYear + i - 2);\r\n          year.value = currentYear;\r\n          updateDaysInMonth();\r\n          fetchData();\r\n        }\r\n      };\r\n  \r\n      // Obtener datos de utilidad diaria\r\n      const fetchData = async () => {\r\n        if (!year.value) return;\r\n        try {\r\n          const params = { year: year.value, month: month.value, status: status.value };\r\n          if (selectedPDV.value !== 'Todos') params.pdv = selectedPDV.value;\r\n          if (selectedDay.value !== 'Todos') params.day = selectedDay.value;\r\n  \r\n          const response = await axios.get('/dashboard/daily-profit', { params });\r\n          dailyProfitData.value = response.data.data || [];\r\n          pdvs.value = response.data.pdvs || [];\r\n          totals.value = response.data.totals || {};\r\n          updateFilteredData();\r\n          console.log('Datos recibidos:', { dailyProfitData: dailyProfitData.value, pdvs: pdvs.value, totals: totals.value });\r\n        } catch (error) {\r\n          console.error('Error fetching daily profit data:', error);\r\n          dailyProfitData.value = [];\r\n          pdvs.value = [];\r\n          totals.value = {};\r\n          filteredDailyProfitData.value = [];\r\n          filteredPdvs.value = [];\r\n          filteredTotals.value = {};\r\n          if (error.response && error.response.status === 401) {\r\n            router.push('/login');\r\n          }\r\n        }\r\n      };\r\n  \r\n      // Actualizar datos filtrados\r\n      const updateFilteredData = () => {\r\n        // Filtrar PDVs con datos\r\n        const pdvsWithData = new Set();\r\n        dailyProfitData.value.forEach(row => {\r\n          Object.keys(row).forEach(key => {\r\n            if (key !== 'date' && key !== 'total' && pdvs.value.includes(key)) {\r\n              pdvsWithData.add(key);\r\n            }\r\n          });\r\n        });\r\n  \r\n        if (selectedPDV.value === 'Todos') {\r\n          filteredPdvs.value = pdvs.value.filter(pdv => pdvsWithData.has(pdv));\r\n        } else {\r\n          filteredPdvs.value = pdvs.value.filter(pdv => pdv === selectedPDV.value && pdvsWithData.has(pdv));\r\n        }\r\n  \r\n        if (selectedDay.value === 'Todos') {\r\n          filteredDailyProfitData.value = dailyProfitData.value;\r\n        } else {\r\n          const dayStr = selectedDay.value.toString().padStart(2, '0');\r\n          const monthStr = month.value.toString().padStart(2, '0');\r\n          const datePattern = `${dayStr}/${monthStr}/${year.value}`;\r\n          filteredDailyProfitData.value = dailyProfitData.value.filter(row => {\r\n            const dateStr = row.date.includes(', ') ? row.date.split(', ')[1] : row.date;\r\n            return dateStr.includes(datePattern);\r\n          });\r\n        }\r\n  \r\n        filteredTotals.value = { date: 'TOTALES' };\r\n        filteredPdvs.value.forEach(pdv => {\r\n          filteredTotals.value[pdv] = {\r\n            ventas: filteredDailyProfitData.value.reduce((sum, row) => sum + (row[pdv]?.ventas || 0), 0),\r\n            costos: filteredDailyProfitData.value.reduce((sum, row) => sum + (row[pdv]?.costos || 0), 0),\r\n            produccion: filteredDailyProfitData.value.reduce((sum, row) => sum + (row[pdv]?.produccion || 0), 0),\r\n            utilidad: filteredDailyProfitData.value.reduce((sum, row) => sum + (row[pdv]?.utilidad || 0), 0)\r\n          };\r\n        });\r\n        filteredTotals.value.total = {\r\n          ventas: filteredDailyProfitData.value.reduce((sum, row) => sum + (row.total?.ventas || 0), 0),\r\n          costos: filteredDailyProfitData.value.reduce((sum, row) => sum + (row.total?.costos || 0), 0),\r\n          produccion: filteredDailyProfitData.value.reduce((sum, row) => sum + (row.total?.produccion || 0), 0),\r\n          utilidad: filteredDailyProfitData.value.reduce((sum, row) => sum + (row.total?.utilidad || 0), 0)\r\n        };\r\n      };\r\n  \r\n      // Formatear moneda\r\n      const formatCurrency = (value) => {\r\n        return new Intl.NumberFormat('es-CO', { style: 'currency', currency: 'COP', minimumFractionDigits: 0 }).format(value);\r\n      };\r\n  \r\n      // Datos para el gráfico de barras\r\n      const barChartData = computed(() => {\r\n        const data = {\r\n          labels: filteredPdvs.value,\r\n          datasets: [\r\n            {\r\n              label: 'Utilidad Total (COP)',\r\n              data: filteredPdvs.value.map(pdv => filteredTotals.value[pdv]?.utilidad || 0),\r\n              backgroundColor: 'rgba(75, 192, 192, 0.6)',\r\n              borderColor: 'rgba(75, 192, 192, 1)',\r\n              borderWidth: 1\r\n            }\r\n          ]\r\n        };\r\n        console.log('barChartData:', data);\r\n        return data;\r\n      });\r\n  \r\n      const barChartOptions = {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true,\r\n            title: {\r\n              display: true,\r\n              text: 'Utilidad (COP)'\r\n            },\r\n            ticks: {\r\n              callback: function(value) {\r\n                return new Intl.NumberFormat('es-CO', { style: 'currency', currency: 'COP', minimumFractionDigits: 0 }).format(value);\r\n              }\r\n            }\r\n          },\r\n          x: {\r\n            title: {\r\n              display: true,\r\n              text: 'Punto de Venta'\r\n            }\r\n          }\r\n        },\r\n        plugins: {\r\n          legend: { display: true },\r\n          tooltip: {\r\n            callbacks: {\r\n              label: function(context) {\r\n                let label = context.dataset.label || '';\r\n                if (label) label += ': ';\r\n                label += new Intl.NumberFormat('es-CO', { style: 'currency', currency: 'COP', minimumFractionDigits: 0 }).format(context.parsed.y);\r\n                return label;\r\n              }\r\n            }\r\n          },\r\n          datalabels: {\r\n            display: true,\r\n            anchor: 'center',\r\n            align: 'center',\r\n            color: '#fff',\r\n            font: { size: 11, weight: 'bold' },\r\n            formatter: function(value) {\r\n              return new Intl.NumberFormat('es-CO', { style: 'currency', currency: 'COP', minimumFractionDigits: 0 }).format(value);\r\n            }\r\n          }\r\n        }\r\n      };\r\n  \r\n      // Datos para el gráfico de líneas\r\n      const lineChartData = computed(() => {\r\n        const labels = filteredDailyProfitData.value.map(row => {\r\n          const dateStr = row.date.includes(', ') ? row.date.split(', ')[1] : row.date;\r\n          const [day, month, year] = dateStr.split('/');\r\n          return `${year}-${month}-${day}`;\r\n        });\r\n  \r\n        let data;\r\n        if (selectedPdv.value === 'total') {\r\n          data = filteredDailyProfitData.value.map(row => row.total.utilidad);\r\n        } else {\r\n          data = filteredDailyProfitData.value.map(row => (row[selectedPdv.value]?.utilidad || 0));\r\n        }\r\n  \r\n        const chartData = {\r\n          labels: labels,\r\n          datasets: [\r\n            {\r\n              label: selectedPdv.value === 'total' ? 'Utilidad Total (COP)' : `Utilidad de ${selectedPdv.value} (COP)`,\r\n              data: data,\r\n              fill: false,\r\n              borderColor: 'rgba(255, 99, 132, 1)',\r\n              backgroundColor: 'rgba(255, 99, 132, 0.2)',\r\n              tension: 0.1\r\n            }\r\n          ]\r\n        };\r\n        console.log('lineChartData:', chartData);\r\n        return chartData;\r\n      });\r\n  \r\n      const lineChartOptions = {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        scales: {\r\n          x: {\r\n            type: 'time',\r\n            time: {\r\n              unit: 'day',\r\n              tooltipFormat: 'dd/MM/yyyy',\r\n              displayFormats: { day: 'dd/MM/yyyy' }\r\n            },\r\n            title: { display: true, text: 'Fecha' }\r\n          },\r\n          y: {\r\n            beginAtZero: true,\r\n            title: { display: true, text: 'Utilidad (COP)' },\r\n            ticks: {\r\n              callback: function(value) {\r\n                return new Intl.NumberFormat('es-CO', { style: 'currency', currency: 'COP', minimumFractionDigits: 0 }).format(value);\r\n              }\r\n            }\r\n          }\r\n        },\r\n        plugins: {\r\n          legend: { display: true },\r\n          tooltip: {\r\n            callbacks: {\r\n              label: function(context) {\r\n                let label = context.dataset.label || '';\r\n                if (label) label += ': ';\r\n                label += new Intl.NumberFormat('es-CO', { style: 'currency', currency: 'COP', minimumFractionDigits: 0 }).format(context.parsed.y);\r\n                return label;\r\n              }\r\n            }\r\n          },\r\n          datalabels: { display: false }\r\n        }\r\n      };\r\n  \r\n      // Cargar años al montar el componente\r\n      onMounted(() => {\r\n        console.log('Montando componente, estado inicial:', { month: month.value, months: months.value });\r\n        if (store.state.auth.token) {\r\n          fetchAvailableYears();\r\n        } else {\r\n          router.push('/login');\r\n        }\r\n      });\r\n  \r\n      // Actualizar gráficos al cambiar PDV\r\n      watch(selectedPdv, () => {\r\n        console.log('PDV seleccionado cambiado a:', selectedPdv.value);\r\n      });\r\n  \r\n      // Vigilar cambios en month para depuración\r\n      watch(month, (newMonth) => {\r\n        console.log('Month cambiado a:', newMonth);\r\n      });\r\n  \r\n      return {\r\n        year,\r\n        years,\r\n        month,\r\n        months,\r\n        monthName,\r\n        status,\r\n        selectedPDV,\r\n        selectedDay,\r\n        daysInMonth,\r\n        dailyProfitData,\r\n        filteredDailyProfitData,\r\n        pdvs,\r\n        filteredPdvs,\r\n        totals,\r\n        filteredTotals,\r\n        noData,\r\n        selectedPdv,\r\n        barChartData,\r\n        barChartOptions,\r\n        lineChartData,\r\n        lineChartOptions,\r\n        fetchData,\r\n        updateDaysAndFetch,\r\n        formatCurrency\r\n      };\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .daily-profit {\r\n    padding: 20px;\r\n  }\r\n  \r\n  .filters {\r\n    margin-bottom: 20px;\r\n    display: flex;\r\n    gap: 15px;\r\n    align-items: center;\r\n    flex-wrap: wrap;\r\n  }\r\n  \r\n  .actions {\r\n    margin-bottom: 20px;\r\n    display: flex;\r\n    gap: 10px;\r\n  }\r\n  \r\n  .actions button {\r\n    padding: 8px 16px;\r\n    background-color: #4CAF50;\r\n    color: white;\r\n    border: none;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  .actions button:hover {\r\n    background-color: #45a049;\r\n  }\r\n  \r\n  label {\r\n    margin-right: 10px;\r\n    font-weight: bold;\r\n  }\r\n  \r\n  select {\r\n    padding: 5px;\r\n    border-radius: 4px;\r\n    border: 1px solid #ddd;\r\n  }\r\n  \r\n  .table-container {\r\n    max-width: 100%;\r\n    overflow-x: auto;\r\n    margin-top: 40px;\r\n  }\r\n  \r\n  .profit-table {\r\n    width: 100%;\r\n    border-collapse: collapse;\r\n    font-size: 12px;\r\n  }\r\n  \r\n  .profit-table th,\r\n  .profit-table td {\r\n    border: 1px solid #ddd;\r\n    padding: 4px;\r\n    text-align: center;\r\n  }\r\n  \r\n  .profit-table th {\r\n    background-color: #f2f2f2;\r\n    font-size: 11px;\r\n  }\r\n  \r\n  .profit-table td {\r\n    max-width: 120px;\r\n    white-space: nowrap;\r\n  }\r\n  \r\n  .profit-table td:first-child {\r\n    font-size: 10px;\r\n  }\r\n  \r\n  .total-row {\r\n    font-weight: bold;\r\n    background-color: #f9f9f9;\r\n  }\r\n  \r\n  .no-data-message {\r\n    text-align: center;\r\n    color: #888;\r\n    margin: 20px 0;\r\n    font-size: 14px;\r\n  }\r\n  \r\n  .charts-container {\r\n    margin-bottom: 40px;\r\n  }\r\n  \r\n  .chart-wrapper {\r\n    margin-bottom: 60px;\r\n    height: 400px;\r\n  }\r\n  \r\n  .chart-wrapper h2 {\r\n    text-align: center;\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  .pdv-selector {\r\n    margin-bottom: 20px;\r\n    text-align: center;\r\n  }\r\n  </style>","import { render } from \"./DailyProfit.vue?vue&type=template&id=ba912384&scoped=true\"\nimport script from \"./DailyProfit.vue?vue&type=script&lang=js\"\nexport * from \"./DailyProfit.vue?vue&type=script&lang=js\"\n\nimport \"./DailyProfit.vue?vue&type=style&index=0&id=ba912384&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-ba912384\"]])\n\nexport default __exports__"],"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_toDisplayString","$setup","monthName","year","_hoisted_2","_cache","$event","onChange","args","fetchData","_Fragment","_renderList","years","y","value","_hoisted_3","month","updateDaysAndFetch","months","m","num","name","_hoisted_4","status","selectedPDV","pdvs","pdv","_hoisted_5","selectedDay","daysInMonth","day","_hoisted_6","noData","_hoisted_7","_createCommentVNode","_hoisted_8","_hoisted_9","_createVNode","_component_Bar","data","barChartData","options","barChartOptions","_hoisted_10","_hoisted_11","selectedPdv","filteredPdvs","_hoisted_12","_component_Line","lineChartData","lineChartOptions","_hoisted_13","_hoisted_14","filteredDailyProfitData","row","date","formatCurrency","utilidad","total","length","_hoisted_15","filteredTotals","ChartJS","register","Title","Tooltip","Legend","BarElement","LineElement","PointElement","CategoryScale","LinearScale","TimeScale","ChartDataLabels","components","Bar","Line","setup","store","useStore","router","useRouter","ref","currentDate","Date","currentMonth","getMonth","currentYear","getFullYear","dailyProfitData","totals","computed","selectedMonth","find","result","every","console","log","updateDaysInMonth","daysInMonthMap","numDays","Array","from","_","i","fetchAvailableYears","async","response","axios","get","includes","error","params","updateFilteredData","push","pdvsWithData","Set","forEach","Object","keys","add","filter","has","dayStr","toString","padStart","monthStr","datePattern","dateStr","split","ventas","reduce","sum","costos","produccion","Intl","NumberFormat","style","currency","minimumFractionDigits","format","labels","datasets","label","map","backgroundColor","borderColor","borderWidth","responsive","maintainAspectRatio","scales","beginAtZero","title","display","text","ticks","callback","x","plugins","legend","tooltip","callbacks","context","dataset","parsed","datalabels","anchor","align","color","font","size","weight","formatter","chartData","fill","tension","type","time","unit","tooltipFormat","displayFormats","onMounted","state","auth","token","watch","newMonth","__exports__","render"],"sourceRoot":""}